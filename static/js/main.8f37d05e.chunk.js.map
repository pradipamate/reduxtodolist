{"version":3,"sources":["App.js","action/todoaction.js","serviceWorker.js","reducer/Todoreducer.js","store/store.js","index.js"],"names":["App","useState","todo","setTodo","dispatch","useDispatch","todos","useSelector","state","deleteTodo","todoId","type","payload","console","log","length","undefined","TodoList","map","key","id","name","className","onClick","bind","Container","Row","Col","sm","span","offset","onSubmit","event","preventDefault","trim","addTodoAction","addTodo","uuid","placeholder","value","onChange","target","Button","Boolean","window","location","hostname","match","defaultState","initialstage","store","createStore","action","filter","jsx","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sQAgEeA,MAvDf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,KAEPC,EAAWC,cAeXC,EAAQC,aAAY,SAACC,GAAD,OAAWA,EAAMF,SAErCG,EAAa,SAACC,GAAD,OAAYN,ECvBQ,CACrCO,KAAK,cACLC,QDqBuDF,KAEzD,GADAG,QAAQC,IAAI,aAAcR,GACL,KAAjBA,EAAMS,aAA2BC,IAAVV,EACzB,IAAIW,EAAWX,EAAMY,KAAI,SAAAhB,GAAI,OAC3B,wBAAIiB,IAAKjB,EAAKkB,IACZ,8BAAOlB,EAAKmB,MACZ,0BAAMC,UAAU,gBAAgBC,QAASd,EAAWe,KAAK,KAAMtB,EAAKkB,KAApE,SAQN,OACE,yBAAKE,UAAU,gBACb,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1B,qDACA,0BAAMC,SAhCC,SAAAC,GACfA,EAAMC,iBACc,KAAhB/B,EAAKgC,UANM,SAAChC,GAASE,ECZA,SAACF,GAAD,MAAS,CAClCS,KAAK,WACLC,QAAQV,GDU0BiC,CAAcjC,IAO9CkC,CAAQ,CACNhB,GAAIiB,cACJhB,KAAMnB,IAEVC,EAAQ,OA0BE,6BACE,2BAAOQ,KAAK,OAAOW,UAAU,eAAeD,KAAK,OAAOiB,YAAY,cAAcC,MAAOrC,EAAMsC,SArC5F,SAAAR,GACd7B,EAAQ6B,EAAMS,OAAOF,UAqCV,kBAACG,EAAA,EAAD,CAAQ/B,KAAK,UAAb,eAGJ,wBAAIW,UAAU,QACXL,QE3CK0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BClBAC,EAAa,GCIbC,EAAe,CACjB3C,MAAM,CACD,CACAc,GAAGiB,cACHhB,KAAK,aAEL,CACGD,GAAGiB,cACHhB,KAAK,gBASF6B,EAJMC,aDfN,WAA8B,IAA7B3C,EAA4B,uDAAtBwC,EAAaI,EAAS,uCACxC,OAAOA,EAAOzC,MACZ,IAAK,WACH,sBACOH,EADP,CAEIF,MAAM,GAAD,mBAAKE,EAAMF,OAAX,CAAiB8C,EAAOxC,YAEhC,IAAK,cACD,sBACOJ,EADP,CAEIF,MAAME,EAAMF,MAAM+C,QAAO,SAACnD,GAAD,OAAQA,EAAKkB,KAAKgC,EAAOxC,aAE1D,QACD,OAAOJ,KCIXyC,GCZEK,EACH,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,OAIPrC,QAAQC,IAAIoC,EAAMK,YAClBC,IAASC,OAAOH,EAAKI,SAASC,eAAe,SHqHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.8f37d05e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { v1 as uuid } from \"uuid\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteTodoAction } from './action/todoaction';\nimport { addTodoAction } from './action/todoaction';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\n\nfunction App() {\n  const [todo, setTodo] = useState(\"\");\n  const dispatch = useDispatch();\n  const addTodo = ((todo) => dispatch(addTodoAction(todo)));\n  const onChange = event => {\n     setTodo(event.target.value)\n  }\n  const onSubmit = event => {\n    event.preventDefault();\n    if (todo.trim() === \"\") return;\n      addTodo({\n        id: uuid(),\n        name: todo,\n      })\n    setTodo(\"\")\n  }\n\n  const todos = useSelector((state) => state.todos);\n  //Dispatch Data\n  const deleteTodo = (todoId) => dispatch(deleteTodoAction(todoId));\n  console.log(\"todos list\", todos);\n  if (todos.length !== \"\" && todos !== undefined) {\n    var TodoList = todos.map(todo => (\n      <li key={todo.id}>\n        <span>{todo.name}</span>\n        <span className=\"delete-button\" onClick={deleteTodo.bind(null, todo.id)}>x</span>\n      </li>\n    ))\n  }\n  else{\n\n  }\n\n  return (\n    <div className=\"todolist_div\">\n      <Container >\n        <Row>\n          <Col sm={{ span: 6, offset: 4 }} >\n            <h1>Todo List using Redux</h1>\n            <form onSubmit={onSubmit}>\n              <div>\n                <input type=\"text\" className=\"form-control\" name=\"todo\" placeholder=\"enter value\" value={todo} onChange={onChange} />\n                <Button type=\"submit\">Add Todo </Button>\n              </div>\n            </form>\n            <ul className=\"list\">\n              {TodoList}\n            </ul>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","export const addTodoAction = (todo)=>({\r\n    type:'ADD_TODO',\r\n    payload:todo\r\n})\r\n\r\nexport const deleteTodoAction = todoid=>({\r\n    type:'DELETE_TODO',\r\n    payload:todoid\r\n})  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const defaultState=[]\r\n\r\nexport default (state=defaultState,action)=>{\r\n    switch(action.type){\r\n      case 'ADD_TODO':\r\n        return{\r\n            ...state,\r\n            todos:[...state.todos,action.payload],\r\n         };\r\n         case 'DELETE_TODO':\r\n             return{\r\n                 ...state,\r\n                 todos:state.todos.filter((todo)=>todo.id!==action.payload)\r\n              };\r\n         default :\r\n        return state;\r\n    }\r\n }\r\n\r\n ","import { createStore } from 'redux';\r\nimport {v1 as uuid} from \"uuid\"; \r\nimport Todoreducer from \"../reducer/Todoreducer\"\r\n\r\nconst initialstage = {\r\n    todos:[\r\n         {\r\n         id:uuid(),\r\n         name:\"go to gym\"\r\n         },\r\n         {\r\n            id:uuid(),\r\n            name:\"go to gym2\"\r\n         }\r\n      ]\r\n}\r\n\r\nexport const store = createStore(\r\n    Todoreducer,\r\n    initialstage\r\n)\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store'\n\nconst jsx=(\n   <Provider store={store}>\n       <App />\n   </Provider>\n);\n        \nconsole.log(store.getState());\nReactDOM.render(jsx, document.getElementById('root'));\nserviceWorker.unregister();\n\n"],"sourceRoot":""}